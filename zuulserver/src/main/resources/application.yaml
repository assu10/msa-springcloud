spring:
  application:
    name: zuulserver    # 서비스 ID (컨피그 클라이언트가 어떤 서비스를 조회하는지 매핑)
  profiles:
    active: default         # 서비스가 실행할 기본 프로파일
  zipkin:
    base-url: http://localhost:9411   # 집킨 통신에 사용되는 URL

server:
  port: 5555
your.name: "ZUUL DEFAULT"
#spring:
#  rabbitmq:
#    host: localhost
#    port: 5672
#    username: guest
#    password: '{cipher}17b3128621cb4e71fbb5a85ef726b44951b62fac541e1de6c2728c6e9d3594ec'
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true

eureka:
  client:
    register-with-eureka: true    # 레지스트리에 자신을 등록할지에 대한 여부 (디폴트 true)
    fetch-registry: true    # 레지스트리에 있는 정보를 가져올지에 대한 여부  (디폴트 true)
    registry-fetch-interval-seconds: 30   # 서비스 목록을 설정한 시간마다 캐싱 (디폴트 30초)
    disable-delta: true   # 캐싱 시 변경된 부분만 업데이트할 지 여부 (디폴트 false)
    serviceUrl:
      defaultZone: http://peer1:8762/eureka/
  instance:
    lease-renewal-interval-in-seconds: 30    # 유레카 서버로 설정된 시간(second)마다 하트비트 전송 (디폴트 30초)
    # 디스커버리는 서비스 등록 해제 하기 전에 마지막 하트비트에서부터 설정된 시간(second) 동안 하트비트가 수신되지 않으면
    # 서비스 등록 해제 (디폴트 90초)
    lease-expiration-duration-in-seconds: 90
    prefer-ip-address: true   # 서비스의 호스트 이름이 아닌 IP 주소를 유레카 서버에 등록하도록 지정 (디폴트 false)

zuul:
  ignored-services: '*'       # 유레카 기반 모든 경로 제외
  prefix: /api                # 정의한 모든 서비스에 /api 접두어
  routes:
    event-service: /evt/**
    member-service: /mb/**
  sensitive-headers: Cookie,Set-Cookie    # 주울이 하위 서비스에 전파하지 않는 헤더 차단 목록 (디폴트는 Cookie, Set-Cookie, Authorization)
  retryable: true   # 디폴트 false

event-service:    # 이 부분이 없으면 전체적으로 설정 적용
  ribbon:
    MaxAutoRetries: 0   # 첫 시도 실패시 같은 서버로 재시도 하는 수 (첫번째 전송은 제외)
    MaxAutoRetriesNextServer: 1   # 첫 시도 실패시 다음 서버로 재시도 하는 수 (첫번째 전송은 제외)
#    ReadTimeout: 1000       # HttpClient 의 Read Timeout (데이터를 읽어오는 과정의 Timeout 시간)
#    ConnectTimeout: 2000    # HttpClient 의 Connection timeout (연결과정의 Timeout 시간)
    ReadTimeout: 3000       # HttpClient 의 Read Timeout (디폴트 1,000 ms, 데이터를 읽어오는 과정의 Timeout 시간)
    ConnectTimeout: 1000    # HttpClient 의 Connection timeout (디폴트 1,000 ms, 연결과정의 Timeout 시간)

hystrix:
  command:
    default:
      circuitBreaker:
        sleepWindowInMilliseconds: 5000  # 서킷 브레이커가 열린 후 서비스의 회복 상태를 확인할 때까지 대기할 시간 간격. 즉, 서킷 브레이커가 열렸을 때 얼마나 지속될지...(디폴트 5000)
        errorThresholdPercentage: 50  # 서킷 브레이커가 열리기 위헤 requestVolumeThreshold 값만큼 호출한 후 타임아웃, 예외, HTTP 500 반환등으로 실패해야 하는 호출 비율 (디폴트 50)
        requestVolumeThreshold: 10  # 히스트릭스가 호출 차단을 고려하는데 필요한 시간인 10초(metrics.rollingStats.timeInMilliseconds) 동안 연속 호출 횟수 (디폴트 20)
      metrics:
        rollingStats:
          timeInMilliseconds: 10000   # 서비스 호출 문제를 모니터할 시간 간격. 즉 서킷 브레이커가 열리기 위한 조건을 체크할 시간. (디폴트 10초)
          # 설정한 시간 간격동안 통계를 수집할 횟수 (디폴트 10, 이 버킷수는 모니터 시간 간격에 균등하게 분할되어야 함)
          # 여기선 10초 시간 간격을 사용하고, 3초 길이의 5개 버킷에 통계 데이터 수집
          numBuckets: 5
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 8100  # 히스트릭스 타임아웃 5초로 설정 (기본 1초, ribbon 의 타임아웃보다 커야 기대하는 대로 동작함)

logging:
  level:
    com.netflix: DEBUG
    org.springframework.web: WARN
    com.assu.cloud: DEBUG
signing:
  key: assusingkey

