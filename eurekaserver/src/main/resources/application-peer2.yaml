spring:
  application:
    name: eurekaserver-peer2    # 서비스 ID (컨피그 클라이언트가 어떤 서비스를 조회하는지 매핑)
  profiles: peer2
server:
  port: 8763          # 유레카 서버가 수신 대기할 포트
your.name: "EUREKA peer-2"
#spring:
#  rabbitmq:
#    host: localhost
#    port: 5672
#    username: guest
#    password: '{cipher}17b3128621cb4e71fbb5a85ef726b44951b62fac541e1de6c2728c6e9d3594ec'
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true
eureka:
#  instance:
#    hostname: peer2
#    metadataMap:
#      instanceId: peer2_${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true           # 유레카 서비스에 (자신을) 등록하지 않는다. (클러스터 모드가 아니므로)
    fetch-registry: true                 # 레지스트리 정보를 로컬에 캐싱하지 않는다. (클러스터 모드가 아니므로)
    serviceUrl:
      defaultZone: http://peer2:8763/eureka/,http://peer1:8762/eureka/
  #server:
    #wait-time-in-ms-when-sync-empty: 5    # 서버가 요청을 받기 전 대기할 초기 시간 (5ms, 운영 환경에선 삭제 필요)
    # 일시적인 네트워크 장애로 인한 서비스 해제 막기 위한 보호모드 해제 (디폴트 60초, 운영에선 삭제 필요)
    # 원래는 해당 시간안에 하트비트가 일정 횟수 이상 들어오지 않아야 서비스 해제하는데 false 설정 시 하트비트 들어오지 않으면 바로 서비스 제거
    #enable-self-preservation: false
logging:
  level:
    com.netflix: WARN
    org.springframework.web: WARN
    com.assu.cloud: DEBUG
