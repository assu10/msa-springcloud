spring:
  application:
    name: event-service    # 서비스 ID (컨피그 클라이언트가 어떤 서비스를 조회하는지 매핑)
  profiles:
    active: default         # 서비스가 실행할 기본 프로파일
  cloud:
    stream:
      bindings:
        inboundMemberChanges:   # inboundMemberChanges 은 채널명, EventServiceApplication 의 Sink.INPUT 채널에 매핑되고, input 채널을 mgChangeTopic 큐에 매핑함
          destination: mbChangeTopic       # 메시지를 넣은 메시지 큐(토픽) 이름
          content-type: application/json
          group: eventGroup   # 메시지를 소비할 소비자 그룹의 이름
      kafka:    # stream.kafka 는 해당 서비스를 카프카에 바인딩
        binder:
          zkNodes: localhost    # zkNodes, brokers 는 스트림에게 카프카와 주키퍼의 네트워크 위치 전달
          brokers: localhost
server:
  port: 8070
your.name: "EVENT DEFAULT."
#spring:
#  rabbitmq:
#    host: localhost
#    port: 5672
#    username: guest
#    password: '{cipher}17b3128621cb4e71fbb5a85ef726b44951b62fac541e1de6c2728c6e9d3594ec'
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true

eureka:
  client:
    register-with-eureka: true    # 레지스트리에 자신을 등록할지에 대한 여부 (디폴트 true)
    fetch-registry: true    # 레지스트리에 있는 정보를 가져올지에 대한 여부  (디폴트 true)
    registry-fetch-interval-seconds: 30   # 서비스 목록을 설정한 시간마다 캐싱 (디폴트 30초)
    disable-delta: true   # 캐싱 시 변경된 부분만 업데이트할 지 여부 (디폴트 false)
    serviceUrl:
      defaultZone: http://peer1:8762/eureka/
  instance:
    lease-renewal-interval-in-seconds: 30    # 유레카 서버로 설정된 시간(second)마다 하트비트 전송 (디폴트 30초)
    # 디스커버리는 서비스 등록 해제 하기 전에 마지막 하트비트에서부터 설정된 시간(second) 동안 하트비트가 수신되지 않으면
    # 서비스 등록 해제 (디폴트 90초)
    lease-expiration-duration-in-seconds: 90
    prefer-ip-address: true   # 서비스의 호스트 이름이 아닌 IP 주소를 유레카 서버에 등록하도록 지정 (디폴트 false)

logging:
  level:
    com.netflix: WARN
    org.springframework.web: WARN
    com.assu.cloud: DEBUG
service:
  id:
    member: member-service
    zuul: zuulserver
security:
  oauth2:
    resource:
      user-info-uri: http://localhost:8901/auth/user    # OAuth2 콜백 URL
signing:
  key: assusingkey

#spring:
#  cloud:
#    stream:
#      bindings:
#        input:   # input 은 채널명, EventServiceApplication 의 Sink.INPUT 채널에 매핑되고, input 채널을 mgChangeTopic 큐에 매핑함
#          destination: mbChangeTopic       # 메시지를 넣은 메시지 큐(토픽) 이름
#          content-type: application/json
#          group: eventGroup   # 메시지를 소비할 소비자 그룹의 이름
#      kafka:    # stream.kafka 는 해당 서비스를 카프카에 바인딩
#        binder:
#          zkNodes: localhost    # zkNodes, brokers 는 스트림에게 카프카와 주키퍼의 네트워크 위치 전달
#          brokers: localhost
#redis
redis:
  server: localhost
  port: 6379